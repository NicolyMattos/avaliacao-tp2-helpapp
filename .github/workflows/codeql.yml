name: "Avaliacao TP2 1706"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '45 8 * * 6'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})

    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:

      security-events: write

      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: csharp
          build-mode: none
        - language: javascript-typescript
          build-mode: none
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Analise Qualidade de Codigo BOT
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Instala 7-Zip
      run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full

    - name: Cria pasta nota-prova e copia README
      run: |
        rm -rf nota-prova
        mkdir nota-prova
        cp README.md nota-prova/README.md

    - name: Gera lista de commits e autores
      run: |
        git log --pretty=format:"%h - %an - %s" > nota-prova/commits.txt

    - name: Compacta a pasta nota-prova em zip com senha
      run: |
        7z a -tzip nota-prova.zip ./nota-prova/* -p'provaicoma3010'
              - name: Fazer requisição e exibir resposta
        id: deepseek
        run: |
          # Faz a requisição à API usando curl e armazena a resposta em uma variável
          RESPONSE=$(curl -s -X POST "https://api.deepseek.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DEEPSEEK_API_KEY }}" \
            -d '{
              "model": "deepseek-chat",
              "messages": [{"role": "user", "content": "Quem é o CEO da DeepSeek?"}]
            }')

          # Exibe a resposta completa no log (para debug)
          echo "Resposta bruta: $RESPONSE"

          # Extrai o conteúdo da resposta usando jq (ferramenta para manipular JSON)
          MESSAGE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Define a saída (output) do passo para uso em outros steps
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

          # Exibe a mensagem extraída
          echo "Resposta do DeepSeek: $MESSAGE"
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

    - name: Usar a resposta em outro passo
      run: |
          echo "Resposta capturada: ${{ steps.deepseek.outputs.message }}"
      
